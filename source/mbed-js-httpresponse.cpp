/* Generated by https://github.com/janjongboom/mbed-js-wrapper-generator */

#include "jerryscript-mbed-util/logging.h"
#include "jerryscript-mbed-library-registry/wrap_tools.h"

#include <string.h>
#include "http_response.h"

/**
 * HttpResponse#status_code (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpResponse, status_code) {
    CHECK_ARGUMENT_COUNT(HttpResponse, status_code, (args_count == 0));

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpResponse* native_ptr = reinterpret_cast<HttpResponse*>(ptr_val);

    int result = native_ptr->get_status_code();
    return jerry_create_number(result);
}

/**
 * HttpResponse#status_message (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpResponse, status_message) {
    CHECK_ARGUMENT_COUNT(HttpResponse, status_message, (args_count == 0));

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpResponse* native_ptr = reinterpret_cast<HttpResponse*>(ptr_val);

    string result = native_ptr->get_status_message();
    return jerry_create_string((const jerry_char_t*) result.c_str());
}

/**
 * HttpResponse#body (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpResponse, body) {
    CHECK_ARGUMENT_COUNT(HttpResponse, body, (args_count == 0));

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpResponse* native_ptr = reinterpret_cast<HttpResponse*>(ptr_val);

    string result = native_ptr->get_body_as_string();
    return jerry_create_string((const jerry_char_t*) result.c_str());
}

/**
 * HttpResponse#headers (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpResponse, headers) {
    CHECK_ARGUMENT_COUNT(HttpResponse, headers, (args_count == 0));

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpResponse* native_ptr = reinterpret_cast<HttpResponse*>(ptr_val);

    jerry_value_t header_obj = jerry_create_object();

    for (size_t ix = 0; ix < native_ptr->get_headers_length(); ix++) {
        const jerry_char_t* key = (const jerry_char_t*) native_ptr->get_headers_fields()[ix]->c_str();
        const jerry_char_t* value = (const jerry_char_t*)native_ptr->get_headers_values()[ix]->c_str();

        jerry_set_property(header_obj, jerry_create_string(key), jerry_create_string(value));
    }

    return header_obj;
}

/**
 * HttpResponse#destructor
 *
 * Called if/when the HttpResponse is GC'ed.
 */
void NAME_FOR_CLASS_NATIVE_DESTRUCTOR(HttpResponse)(const uintptr_t native_handle) {
    delete reinterpret_cast<HttpResponse*>(native_handle);
}

/**
 * mbed_js_wrap_native_object (turns a native HttpResponse object into a JS object)
 */
jerry_value_t mbed_js_wrap_native_object(HttpResponse* ptr) {
    uintptr_t native_ptr = (uintptr_t) ptr;

    jerry_value_t js_object = jerry_create_object();
    jerry_set_object_native_handle(js_object, native_ptr, NAME_FOR_CLASS_NATIVE_DESTRUCTOR(HttpResponse));

    ATTACH_CLASS_FUNCTION(js_object, HttpResponse, status_code);
    ATTACH_CLASS_FUNCTION(js_object, HttpResponse, status_message);
    ATTACH_CLASS_FUNCTION(js_object, HttpResponse, headers);
    ATTACH_CLASS_FUNCTION(js_object, HttpResponse, body);

    return js_object;
}

/**
 * HttpResponse (native JavaScript constructor)
 */
DECLARE_CLASS_CONSTRUCTOR(HttpResponse) {
    CHECK_ARGUMENT_COUNT(HttpResponse, __constructor, (args_count == 0));

    // Create the native object
    HttpResponse* native_obj = new HttpResponse();

    return mbed_js_wrap_native_object(native_obj);
}

void mbed_js_httpresponse_setup() {

}
