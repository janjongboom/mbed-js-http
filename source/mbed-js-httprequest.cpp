/* Generated by https://github.com/janjongboom/mbed-js-wrapper-generator */

#include "jerryscript-mbed-util/logging.h"
#include "jerryscript-mbed-library-registry/wrap_tools.h"

#include "mbed.h"
#include "http_request.h"
#include "mbed-js-httpresponse.h"

/**
 * HttpRequest#send (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpRequest, send) {
    CHECK_ARGUMENT_COUNT(HttpRequest, send, (args_count == 0 || args_count == 1));
    CHECK_ARGUMENT_TYPE_ON_CONDITION(HttpRequest, send, 0, string, args_count == 1);

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpRequest* native_ptr = reinterpret_cast<HttpRequest*>(ptr_val);

    HttpResponse* result;

    if (args_count == 1) {
        jerry_size_t szArg0 = jerry_get_string_size(args[0]);
        jerry_char_t *sArg0 = (jerry_char_t*) calloc(szArg0 + 1, sizeof(jerry_char_t));
        jerry_string_to_char_buffer(args[0], sArg0, szArg0);

        result = native_ptr->send((const void*)sArg0, szArg0);
    }
    else {
        result = native_ptr->send();
    }

    if (result == NULL) {
        return jerry_create_number(native_ptr->get_error());
    }
    return mbed_js_wrap_native_object(result);
}

/**
 * HttpRequest#set_header (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpRequest, set_header) {
    CHECK_ARGUMENT_COUNT(HttpRequest, set_header, (args_count == 2));
    CHECK_ARGUMENT_TYPE_ALWAYS(HttpRequest, set_header, 0, string);
    CHECK_ARGUMENT_TYPE_ALWAYS(HttpRequest, set_header, 1, string);

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpRequest* native_ptr = reinterpret_cast<HttpRequest*>(ptr_val);

    jerry_size_t szArg0 = jerry_get_string_size(args[0]);
    jerry_char_t *sArg0 = (jerry_char_t*) calloc(szArg0 + 1, sizeof(jerry_char_t));
    jerry_string_to_char_buffer(args[0], sArg0, szArg0);
    string arg0((const char*) sArg0);
    jerry_size_t szArg1 = jerry_get_string_size(args[1]);
    jerry_char_t *sArg1 = (jerry_char_t*) calloc(szArg1 + 1, sizeof(jerry_char_t));
    jerry_string_to_char_buffer(args[1], sArg1, szArg1);
    string arg1((const char*) sArg1);

    native_ptr->set_header(arg0, arg1);
    return jerry_create_undefined();
}

/**
 * HttpRequest#get_error (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(HttpRequest, get_error) {
    CHECK_ARGUMENT_COUNT(HttpRequest, get_error, (args_count == 0));


    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    HttpRequest* native_ptr = reinterpret_cast<HttpRequest*>(ptr_val);



    nsapi_error_t result = native_ptr->get_error();
    return jerry_create_number(result);
}


/**
 * HttpRequest#destructor
 *
 * Called if/when the HttpRequest is GC'ed.
 */
void NAME_FOR_CLASS_NATIVE_DESTRUCTOR(HttpRequest)(const uintptr_t native_handle) {
    delete reinterpret_cast<HttpRequest*>(native_handle);
}

/**
 * mbed_js_wrap_native_object (turns a native HttpRequest object into a JS object)
 */
static jerry_value_t mbed_js_wrap_native_object(HttpRequest* ptr) {
    uintptr_t native_ptr = (uintptr_t) ptr;

    jerry_value_t js_object = jerry_create_object();
    jerry_set_object_native_handle(js_object, native_ptr, NAME_FOR_CLASS_NATIVE_DESTRUCTOR(HttpRequest));

    ATTACH_CLASS_FUNCTION(js_object, HttpRequest, send);
    ATTACH_CLASS_FUNCTION(js_object, HttpRequest, set_header);
    ATTACH_CLASS_FUNCTION(js_object, HttpRequest, get_error);

    return js_object;
}

/**
 * HttpRequest (native JavaScript constructor)
 */
DECLARE_CLASS_CONSTRUCTOR(HttpRequest) {
    CHECK_ARGUMENT_COUNT(HttpRequest, __constructor, (args_count == 3));
    CHECK_ARGUMENT_TYPE_ALWAYS(HttpRequest, __constructor, 0, object);
    CHECK_ARGUMENT_TYPE_ALWAYS(HttpRequest, __constructor, 1, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(HttpRequest, __constructor, 2, string);

    uintptr_t arg0_native_handle;
    jerry_get_object_native_handle(args[0], &arg0_native_handle);
    NetworkInterface* arg0 = (NetworkInterface*)arg0_native_handle;
    http_method arg1 = http_method(jerry_get_number_value(args[1]));
    jerry_size_t szArg2 = jerry_get_string_size(args[2]);
    jerry_char_t *sArg2 = (jerry_char_t*) calloc(szArg2 + 1, sizeof(jerry_char_t));
    jerry_string_to_char_buffer(args[2], sArg2, szArg2);
    const char* arg2 = (const char*) sArg2;

    // Create the native object
    HttpRequest* native_obj = new HttpRequest(arg0, arg1, arg2);

    return mbed_js_wrap_native_object(native_obj);
}

void mbed_js_httprequest_setup() {

    {
        jerry_value_t enum_obj = jerry_create_object();

        jerry_value_t enum_val;
        jerry_value_t enum_key;

        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_DELETE"), jerry_create_number((double) HTTP_DELETE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_GET"), jerry_create_number((double) HTTP_GET));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_HEAD"), jerry_create_number((double) HTTP_HEAD));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_POST"), jerry_create_number((double) HTTP_POST));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_PUT"), jerry_create_number((double) HTTP_PUT));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_CONNECT"), jerry_create_number((double) HTTP_CONNECT));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_OPTIONS"), jerry_create_number((double) HTTP_OPTIONS));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_TRACE"), jerry_create_number((double) HTTP_TRACE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_COPY"), jerry_create_number((double) HTTP_COPY));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_LOCK"), jerry_create_number((double) HTTP_LOCK));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MKCOL"), jerry_create_number((double) HTTP_MKCOL));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MOVE"), jerry_create_number((double) HTTP_MOVE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_PROPFIND"), jerry_create_number((double) HTTP_PROPFIND));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_PROPPATCH"), jerry_create_number((double) HTTP_PROPPATCH));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_SEARCH"), jerry_create_number((double) HTTP_SEARCH));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_UNLOCK"), jerry_create_number((double) HTTP_UNLOCK));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_BIND"), jerry_create_number((double) HTTP_BIND));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_REBIND"), jerry_create_number((double) HTTP_REBIND));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_UNBIND"), jerry_create_number((double) HTTP_UNBIND));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_ACL"), jerry_create_number((double) HTTP_ACL));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_REPORT"), jerry_create_number((double) HTTP_REPORT));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MKACTIVITY"), jerry_create_number((double) HTTP_MKACTIVITY));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_CHECKOUT"), jerry_create_number((double) HTTP_CHECKOUT));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MERGE"), jerry_create_number((double) HTTP_MERGE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MSEARCH"), jerry_create_number((double) HTTP_MSEARCH));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_NOTIFY"), jerry_create_number((double) HTTP_NOTIFY));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_SUBSCRIBE"), jerry_create_number((double) HTTP_SUBSCRIBE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_UNSUBSCRIBE"), jerry_create_number((double) HTTP_UNSUBSCRIBE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_PATCH"), jerry_create_number((double) HTTP_PATCH));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_PURGE"), jerry_create_number((double) HTTP_PURGE));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_MKCALENDAR"), jerry_create_number((double) HTTP_MKCALENDAR));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_LINK"), jerry_create_number((double) HTTP_LINK));
        jerry_set_property(enum_obj, jerry_create_string((const jerry_char_t*)"HTTP_UNLINK"), jerry_create_number((double) HTTP_UNLINK));

        jerry_value_t global_obj = jerry_get_global_object();
        jerry_set_property(global_obj, jerry_create_string((const jerry_char_t*)"http_method"), enum_obj);
    }
}
